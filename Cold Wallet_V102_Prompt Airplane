import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.os.Bundle;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import java.security.Key;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.util.Collections;
import java.util.logging.Logger;

/**
 * CryoWallet - Cold Wallet Application
 * Copyright (c) 2022 Emiliano German Solazzi Griminger. All rights reserved.
 */
public class ColdWalletActivity extends AppCompatActivity {

    private SecureProcessor sp;
    private SecureEnclave secureEnclave;
    private ColdWallet coldWallet;
    private AirplaneModeManager airplaneModeManager;

    private static final String KEYSTORE_PROVIDER = "AndroidKeyStore";
    private static final String KEY_ALIAS = "MySecureKey";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cold_wallet);

        // Initialize secure processor, secure enclave, cold wallet, and airplane mode manager
        sp = new SecureProcessor();
        secureEnclave = new SecureEnclave();
        coldWallet = new ColdWallet();
        airplaneModeManager = new AirplaneModeManager(this);

        // Prompt user to turn on airplane mode and explain the benefits
        promptAirplaneMode();
    }

    private void promptAirplaneMode() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Airplane Mode");
        builder.setMessage("To enhance security, it is recommended to turn on Airplane Mode. Do you want to proceed with Airplane Mode?");
        builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                handleAirplaneModeDecision(true);
            }
        });
        builder.setNegativeButton("No", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                handleAirplaneModeDecision(false);
            }
        });
        builder.setOnCancelListener(new DialogInterface.OnCancelListener() {
            @Override
            public void onCancel(DialogInterface dialog) {
                handleAirplaneModeDecision(false);
            }
        });
        builder.setCancelable(false); // User must make a choice
        builder.show();
    }

    private void handleAirplaneModeDecision(boolean enableAirplaneMode) {
        if (enableAirplaneMode) {
            try {
                airplaneModeManager.activateAirplaneMode();
            } catch (Exception e) {
                // Handle exceptions during airplane mode activation
                Logger.getLogger(ColdWalletActivity.class.getName()).severe("Error activating Airplane Mode: " + e.getMessage());
                // You might want to inform the user or log the error
            }
        }
        setUsbConnectivity(true);
        generateWalletOffline();
    }

    private void generateWalletOffline() {
        try {
            Key privateKey = generatePrivateKey();
            String mnemonic = generateMnemonic();

            secureEnclave.storeKey(privateKey, mnemonic);

            // Display mnemonic for user backup (Example: Print to log)
            Logger.getLogger(ColdWalletActivity.class.getName()).info("Generated Mnemonic: " + mnemonic);
        } catch (Exception e) {
            // Handle exceptions during wallet generation
            Logger.getLogger(ColdWalletActivity.class.getName()).severe("Error generating wallet: " + e.getMessage());
            // You might want to inform the user or log the error
        }
    }

    private Key generatePrivateKey() throws Exception {
        // Generate a new RSA key pair
        KeyStore keyStore = KeyStore.getInstance(KEYSTORE_PROVIDER);
        keyStore.load(null);

        if (!keyStore.containsAlias(KEY_ALIAS)) {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(
                    KeyProperties.KEY_ALGORITHM_RSA, KEYSTORE_PROVIDER);

            keyPairGenerator.initialize(
                    new KeyGenParameterSpec.Builder(
                            KEY_ALIAS,
                            KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_ENCRYPT)
                            .setKeySize(2048)
                            .setDigests(KeyProperties.DIGEST_SHA256)
                            .build());

            keyPairGenerator.generateKeyPair();
        }

        // Retrieve the private key from the keystore
        PrivateKey privateKey = (PrivateKey) keyStore.getKey(KEY_ALIAS, null);

        return privateKey;
    }

    private String generateMnemonic() {
        // Ensure that the Bip39JavaUtils library is available and handle exceptions
        try {
            byte[] entropy = Bip39JavaUtils.generateEntropy(128);
            return Bip39JavaUtils.generateMnemonic(entropy);
        } catch (Exception e) {
            // Handle exceptions during mnemonic generation
            Logger.getLogger(ColdWalletActivity.class.getName()).severe("Error generating mnemonic: " + e.getMessage());
            // You might want to inform the user or log the error
            return ""; // Return an empty string or handle it appropriately
        }
    }

    // Existing code remains unchanged...

    @Override
    protected void onStop() {
        super.onStop();
        try {
            disableAirplaneMode();
        } catch (Exception e) {
            // Handle exceptions during airplane mode deactivation
            Logger.getLogger(ColdWalletActivity.class.getName()).severe("Error deactivating Airplane Mode: " + e.getMessage());
            // You might want to inform the user or log the error
        }
        restoreUSBConnectivity();
    }

    private void disableAirplaneMode() throws Exception {
        airplaneModeManager.deactivateAirplaneMode();
    }

    // Existing code remains unchanged...

    // Ensure that any additional security measures, testing, and documentation are in place before deployment.
}
