import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.hardware.usb.UsbManager;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.biometric.BiometricPrompt;
import androidx.core.app.ActivityCompat;
import androidx.appcompat.app.AppCompatActivity;

import javax.crypto.Cipher;

/* Coded by Emiliano German Solazzi Griminger */

public class ColdWalletActivity extends AppCompatActivity {

    private static final int REQUEST_PERMISSION = 1;

    private SecureProcessor sp;
    private SecureEnclave secureEnclave;
    private ColdWallet coldWallet;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Request necessary permissions at runtime
        requestPermission();

        // Enable USB connectivity when the app is launched
        setUsbConnectivity(this, true);

        // Enable airplane mode when the app is launched
        setAirplaneMode(this, true);

        // Initialize secure processor, secure enclave, and cold wallet
        sp = new SecureProcessor();
        secureEnclave = new SecureEnclave();
        coldWallet = new ColdWallet();
    }

    @Override
    protected void onStart() {
        super.onStart();

        // Enable airplane mode when the app is in the foreground
        setAirplaneMode(this, true);
    }

    @Override
    protected void onStop() {
        super.onStop();

        // Disable airplane mode when the app is in the background
        setAirplaneMode(this, false);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        // Disable USB connectivity when the app is closed
        setUsbConnectivity(this, false);

        // Disable airplane mode when the app is closed
        setAirplaneMode(this, false);
    }

    private String generateColdWalletAddress() {
        // Use secure methods to generate an address in the cold wallet
        return coldWallet.generateAddress();
    }

    private void showColdWalletAddress(String address) {
        Toast.makeText(this, "Your Cold Wallet Address: " + address, Toast.LENGTH_LONG).show();
    }

    public void receiveFunds() {
        String coldWalletAddress = generateColdWalletAddress();
        showColdWalletAddress(coldWalletAddress);
    }

    private boolean confirmSeedPhrase(String enteredSeedPhrase) {
        // Replace this with actual seed phrase confirmation logic using the cold wallet
        return coldWallet.confirmSeedPhrase(enteredSeedPhrase);
    }

    private Transaction signColdWalletTransaction(String walletType, Transaction tx) {
        // Replace this with actual transaction signing logic using the cold wallet
        return coldWallet.signTransaction(walletType, tx);
    }

    private void updateSecureProcessorFirmware() {
        // Replace this with actual firmware update logic using the cold wallet
        coldWallet.updateFirmware();
    }

    private void requestPermission() {
        // Check and request necessary permissions
        // ...

        // Additional permissions can be added based on your requirements
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        // Handle permission results
        // ...
    }

    private static void setUsbConnectivity(Context context, boolean enable) {
        // Check if the app has the USB permission
        if (hasUsbPermission(context)) {
            // Enable or disable USB connectivity
            UsbManager usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);
            // Implement USB connectivity enabling or disabling logic using usbManager

            if (enable) {
                // Enable USB connectivity logic
            } else {
                // Disable USB connectivity logic
            }
        }
    }

    private static boolean hasUsbPermission(Context context) {
        // Check if the app has USB-related permissions
        // You might need to implement this based on your specific requirements
        return true;
    }

    private static void setAirplaneMode(Context context, boolean enable) {
        // Check if the app has the CHANGE_NETWORK_STATE permission
        if (hasChangeNetworkStatePermission(context)) {
            // Change airplane mode
            Settings.Global.putInt(context.getContentResolver(),
                    Settings.Global.AIRPLANE_MODE_ON, enable ? 1 : 0);

            // Broadcast an intent to inform the system of the change
            Intent intent = new Intent(Intent.ACTION_AIRPLANE_MODE_CHANGED);
            intent.putExtra("state", enable);
            context.sendBroadcast(intent);
        }
    }

    private static boolean hasChangeNetworkStatePermission(Context context) {
        // Check if the app has the CHANGE_NETWORK_STATE permission
        return Build.VERSION.SDK_INT < Build.VERSION_CODES.M ||
                ActivityCompat.checkSelfPermission(context, Manifest.permission.CHANGE_NETWORK_STATE)
                        == PackageManager.PERMISSION_GRANTED;
    }

    private void authenticateWithBiometrics(String actionDescription, Runnable action) {
        BiometricPrompt.Builder builder = new BiometricPrompt.Builder(this);
        builder.setTitle("Confirm Identity");
        builder.setSubtitle("Scan biometrics to " + actionDescription);
        builder.setDescription("Scan your biometrics to confirm your identity and " + actionDescription);
        BiometricPrompt biometricPrompt = builder.build();
        biometricPrompt.authenticate(new BiometricPrompt.CryptoObject(Cipher.getInstance("AES/CBC/PKCS5Padding")), new BiometricPrompt.AuthenticationCallback() {
            @Override
            public void onAuthenticationSucceeded(@NonNull BiometricPrompt.AuthenticationResult result) {
                super.onAuthenticationSucceeded(result);
                action.run();
            }
        });
    }

    public void generateSeedPhrase() {
        authenticateWithBiometrics("generate seed phrase", () -> {
            String seedPhrase = coldWallet.generateSeedPhrase();

            System.out.println("Please re-enter the seed phrase to confirm: ");
            String enteredSeedPhrase = "UserEnteredSeedPhrase";

            if (confirmSeedPhrase(enteredSeedPhrase)) {
                System.out.println("Seed phrase confirmed");
            } else {
                System.out.println("Seed phrase not confirmed");
            }
        });
    }

    public void signTransaction(String walletType, Transaction tx) {
        authenticateWithBiometrics("sign transaction", () -> {
            Transaction signedTx = signColdWalletTransaction(walletType, tx);

            // Use the signed transaction as needed
            // ...
        });
    }

    public void updateSecureProcessor() {
        authenticateWithBiometrics("update firmware", this::updateSecureProcessorFirmware);
    }
}
